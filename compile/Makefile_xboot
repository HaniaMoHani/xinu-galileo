#########################################################################
#									#
#									#
#  Makefile for the Intel Galileo version of XBOOT			#
#									#
#  includes: .xboot_deps and .xboot_defs				#
#									#
#									#
#########################################################################

COMPILER_ROOT	=	/usr/bin/
PNAME		=	galileo
PLAT		=	Platform_$(PNAME)
TOPDIR		=	..

CC		=	${COMPILER_ROOT}gcc
LD		=	${COMPILER_ROOT}ld
OBJCOPY		=	${COMPILER_ROOT}objcopy
XBOOT		=	$(TOPDIR)/compile/xboot
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make
MKVERS		=	$(TOPDIR)/compile/bin/mkvers

MAKEDEP		=	$(CC) -M -MG
XBOOTMAKE	=	make -f Makefile_xboot

DEFS		=	-DBSDURG -DVERSION=\""`cat xboot_version`"\"
INCLUDE		=	-I$(TOPDIR)/include

# Compiler flags
CFLAGS  = -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -O ${DEFS} ${INCLUDE}
SFLAGS  = ${INCLUDE}

# Loader flags

LDFLAGS = -dn -m elf_i386 -Map xinu.map -T ld.script.xboot

all:	xboot

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
include .xboot_defs

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))

#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration_xboot
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure

BLDDIRS	= binaries
export

#--------------------------------------------------------------------------------
# Specific additional rules and exceptions
#--------------------------------------------------------------------------------

xboot:	Makefile $(BLDDIRS) configure $(CONFH) $(CONFC) $(LD_LIST)
	@echo;echo 'Loading object files to produce GRUB bootable xboot'
	@$(LD) $(LDFLAGS) $(LD_LIST) -o $(XBOOT)
	@(cd $(TOPDIR)/config; make clean)
	@echo

$(BLDDIRS): 
	@mkdir -p $(BLDDIRS)

objects: $(LD_LIST)

$(CONFH): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFH)
	@$(XBOOTMAKE) configure

$(CONFC): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFC)
	@$(XBOOTMAKE) configure

$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C $(TOPDIR)/config clean all xboot_install

configure:
	@echo forcing a rebuild of conf.h and conf.c
	@(cd $(TOPDIR)/config; make xboot_install)

clean:
	@echo removing .o files
	@rm -f ${LD_LIST}
	@echo removing configuration files ...
	@rm -f $(CONFH) $(CONFC)
	@(cd $(TOPDIR)/config; make clean)
	@echo removing xboot ...
	@rm -f $(XBOOT)

#--------------------------------------------------------------------------------
# Locations of source directories and exceptions (.c and .[sS] files to exclude)
#--------------------------------------------------------------------------------

rebuild: $(CONFC)
	@echo Rebuilding the .xboot_defs file
	@$(BUILDMAKE)							\
		-s $(TOPDIR)/system  debug.c  main.c  initialize.c	\
		-s $(TOPDIR)/lib					\
		-s $(TOPDIR)/device/tty					\
		-s $(TOPDIR)/device/nam					\
		-s $(TOPDIR)/device/eth					\
		-s $(TOPDIR)/net  'arp_dump*'  'dhcp_dump*'  pxe.c > .xboot_defs

defclean:
	rm -f .xboot_defs
	touch .xboot_defs

depend: rebuild
	@echo;echo Making all dependencies in .xboot_deps
	@$(MAKEDEP) ${INCLUDE} ${SRC_FULL} > .xboot_deps
	@echo;echo Finished making dependencies

depclean:
	rm -f .xboot_deps
	touch .xboot_deps

include .xboot_deps
