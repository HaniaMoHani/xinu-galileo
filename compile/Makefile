#########################################################################
#									#
#									#
#  Makefile for the Intel Galileo version of the Xinu operating system	#
#									#
#  includes: .deps and .defs						#
#									#
#									#
#########################################################################

COMPILER_ROOT	=	/usr/bin/
PNAME		=	galileo
PLAT		=	Platform_$(PNAME)
TOPDIR		=	..

CC		=	${COMPILER_ROOT}gcc
LD		=	${COMPILER_ROOT}ld
OBJCOPY		=	${COMPILER_ROOT}objcopy
XBOOT		=	$(TOPDIR)/compile/xboot
XINU		=	$(TOPDIR)/compile/xinu
XINUBIN		=	$(TOPDIR)/compile/xinu.bin
XINUXBIN	=	$(TOPDIR)/compile/xinu.xbin
MAKEXBIN 	=	$(TOPDIR)/compile/bin/buildxbin
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make
MKVERS		=	$(TOPDIR)/compile/bin/mkvers

MAKEDEP		=	$(CC) -M -MG

DEFS		=	-DBSDURG -DVERSION=\""`cat version`"\"
INCLUDE		=	-I$(TOPDIR)/include

# Compiler flags
CFLAGS  = -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -O ${DEFS} ${INCLUDE}
SFLAGS  = ${INCLUDE}

# Loader flags

LDFLAGS = -dn -m elf_i386 -Map xinu.map -T ld.script

all:	xinu

#--------------------------------------------------------------------------------
# Handle generation of a new version string when initialize is recompiled
#--------------------------------------------------------------------------------

newversion:
	@echo creating new version
	@$(MKVERS) $(PNAME) > version

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
include .defs

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))
XINU_LD_LIST = $(filter-out binaries/xbootjmp.o binaries/xboot.o,$(LD_LIST))
XBOOT_LD_LIST = $(filter-out binaries/main.o binaries/xsh_%.o binaries/shell.o,$(LD_LIST))


#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure

BLDDIRS	= binaries
export

#--------------------------------------------------------------------------------
# Specific additional rules and exceptions
#--------------------------------------------------------------------------------

xinu:	Makefile $(BLDDIRS) $(CONFH) $(CONFC) $(XINU_LD_LIST)
	@echo;echo 'Loading object files to produce GRUB bootable xinu'
	@$(LD) $(LDFLAGS) $(XINU_LD_LIST) -o $(XINU)
	@echo;echo 'Building $(XINUBIN)'
	@objcopy -O binary $(XINU) $(XINUBIN)
	@echo;echo 'Building $(XINUXBIN)'
	@$(MAKEXBIN) $(XINUBIN) $(XINUXBIN)
	@echo

xboot:	Makefile $(BLDDIRS) $(CONFH) $(CONFC) $(XBOOT_LD_LIST)
	@echo;echo 'Loading object files to produce GRUB bootable xboot'
	@$(LD) $(LDFLAGS) $(XBOOT_LD_LIST) -o $(XBOOT)
	@echo

$(BLDDIRS): 
	@mkdir -p $(BLDDIRS)

objects: $(LD_LIST)

$(CONFH): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFH)
	@make configure

$(CONFC): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFC)
	@make configure

$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C $(TOPDIR)/config clean all install

configure:
	@echo forcing a rebuild of conf.h and conf.c
	@make newversion
	@(cd $(TOPDIR)/config; make install)

clean:
	@echo removing .o files
	@rm -f ${LD_LIST}
	@echo   removing configuration files ...
	@rm -f $(TOPDIR)/include/conf.h $(TOPDIR)/system/conf.c
	@(cd $(TOPDIR)/config; make clean)
	@echo removing xinu ...
	@rm -f $(XBOOT)
	@rm -f $(XINU)
	@rm -f $(XINUBIN)
	@rm -f $(XINUXBIN)

#--------------------------------------------------------------------------------
# Locations of source directories and exceptions (.c and .[sS] files to exclude)
#--------------------------------------------------------------------------------

rebuild: $(CONFC)
	@echo Rebuilding the .defs file
	@$(BUILDMAKE)							\
		-s $(TOPDIR)/system  debug.c	 			\
		-s $(TOPDIR)/lib					\
		-s $(TOPDIR)/device/tty					\
		-s $(TOPDIR)/device/nam					\
		-s $(TOPDIR)/device/eth					\
		-s $(TOPDIR)/device/rds					\
		-s $(TOPDIR)/device/ram					\
		-s $(TOPDIR)/device/sdmc				\
		-s $(TOPDIR)/net  'arp_dump*'  'dhcp_dump*'		\
		-s $(TOPDIR)/shell  'xsh_rdstest*' > .defs

defclean:
	rm -f .defs
	touch .defs

depend: rebuild
	@echo;echo Making all dependencies in .deps
	@$(MAKEDEP) ${INCLUDE} ${SRC_FULL} > .deps
	@echo;echo Finished making dependencies

depclean:
	rm -f .deps
	touch .deps

include .deps
